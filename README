Instruções de Uso dos Scripts
──────────────────────────────

1. Pré-requisitos:
    • Tenha o PostgreSQL (versão 10 ou superior) instalado e o utilitário psql disponível.
    • Verifique se os arquivos CSV (por exemplo, Health Plan Operators Report.csv e os de demonstrações contábeis) estão no local correto:
         - Operadoras: downloads/link2
         - Demonstrações: downloads/link1/2023 e downloads/link1/2024



2. Acessando o Repositório:
    • Abra o terminal e navegue até o diretório do projeto.



3. Criação do Banco de Dados e Tabelas (usando createAndCopy.sql):
    • Para criar o banco de dados “ans_dados” e as tabelas necessárias, conecte-se a um banco existente (como “postgres”) e execute:
         
         psql -U seu_usuario -d postgres -f createAndCopy.sql

    • O script createAndCopy.sql realiza as seguintes operações:
         - Cria o banco de dados “ans_dados” com encoding UTF8.
         - Conecta-se ao banco “ans_dados”.
         - Cria a tabela de operadoras, que armazenará os dados de referência para a chave estrangeira.
         - Cria a tabela definitiva de demonstrações contábeis (demo_contabeis) com a constraint de FK, vinculada à tabela de operadoras.
         - Cria também a tabela de staging (demo_contabeis_stg), que possui a mesma estrutura de demo_contabeis, mas sem constraints de integridade.


4. Importação de Dados:
    • O script createAndCopy.sql também importa os dados via o comando \copy:
         - Os dados da tabela de operadoras são importados do CSV em downloads/link2.
         - Os dados das demonstrações contábeis são importados para a tabela de staging (demo_contabeis_stg) a partir dos CSVs nos diretórios downloads/link1/2023 e downloads/link1/2024.
        • Observação: Para o funcionamento como "DECIMAL", os campos das planilhas originais foram formatadas para que os valores decimais tivessem como separador o ponto (".") no lugar da vírgula (",")  

    • Após a importação para a tabela de staging, o script transfere apenas os registros cujo campo reg_ans possui correspondência na tabela de operadoras para a tabela definitiva demo_contabeis. Isso é feito com o comando:
    
         INSERT INTO demo_contabeis (data, reg_ans, cd_conta_contabil, descricao, vl_saldo_inicial, vl_saldo_final)
         SELECT s.data, s.reg_ans, s.cd_conta_contabil, s.descricao, s.vl_saldo_inicial, s.vl_saldo_final
         FROM demo_contabeis_stg AS s
         WHERE s.reg_ans IN (SELECT registro_ans FROM operadoras);
    
    • Por fim, o script apaga a tabela de staging (DROP TABLE IF EXISTS demo_contabeis_stg;) para manter a limpeza do ambiente.


5. Observações Gerais:
    • A partir da utilização da tabela de staging, evitamos problemas de integridade referencial. Caso os dados importados contenham registros de demonstrações contábeis com reg_ans que não existem em operadoras, eles não serão inseridos na tabela definitiva.
    • Mantenha os arquivos CSV conforme o formato esperado (delimitados por “;” e com cabeçalho). Se houver alterações, atualize os caminhos e parâmetros dos comandos de importação.



6. Teste da Analytic Query:
    • Para verificar as consultas analíticas, execute o script “analyticQueries.sql”. No terminal, estando conectado ao banco “ans_dados” (psql -U seu_usuario -d ans_dados ), execute:

         \i analyticQueries.sql


8. Atualizações Futuras:
    • Para atualizar os dados, novos arquivos CSV podem ser importados utilizando novamente o processo de staging (com ajustes se necessário).
    • Se houver alterações na estrutura das tabelas, atualize primeiro o script createAndCopy.sql e recrie (ou altere) as tabelas conforme a nova estrutura.